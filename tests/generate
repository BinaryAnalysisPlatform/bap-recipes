#!/bin/bash

FAILS=""

function run() {

    rule=${1%/}
    testdir="bap.tests"

    rm -rf $testdir
    mkdir $testdir

    if [ -d $rule ]; then

        for artifact in `ls $rule`; do
            x=`docker images | grep $artifact`

            if [ "$x" != "" ]; then
                sed "s/0x//" $rule/$artifact > $rule/$artifact.tmp
                data=`cat $rule/$artifact.tmp`
                test="$rule-$artifact"
                file="$artifact.exp"
                cat > $file <<EOF

set test "$test"

set addrs {
$data
}

puts "running bap /artifact --recipe=$rule"
exec bap /artifact --recipe=$rule > output


if { [file exists incidents] == 1}  {
   exec grep "incident-location" -i -A 1 incidents > incidents.tmp
} else {
   exec mv output incidents.tmp
}

foreach {a} \$addrs {
   spawn cat incidents.tmp
   expect {
      -nocase "\$a" {pass "for address \$a in $rule for $artifact"}
      default {fail "\$test: incident at \$a not found "}
   }
}

EOF

                mv *.exp $testdir
            fi

            cat > Dockerfile <<EOF

FROM binaryanalysisplatform/bap-artifacts:$artifact as src
FROM binaryanalysisplatform/bap-toolkit

RUN apk update && apk add dejagnu

COPY --from=src /artifact /
COPY bap.tests /home/opam/bap.tests

RUN runtest --tool=bap --all

EOF

            docker image build . | tee out.tmp

            echo "out:"
            cat out.tmp
            fail=`cat out.tmp | grep "FAIL:"`

            if [ "ok$fail" != "ok" ]; then
                FAILS="$FAILS:$fail"
            fi
            rm -rf bap.tests
            rm Dockerfile
            rm -f $rule/*.tmp
        done
    fi

}

targets="$@"

if [ "all$targets" == "all" ]; then
    for t in `ls .`; do
        if [ -d $t ]; then
            run $t
        fi
    done
else
    for t in "$@"; do
        run $t
    done
fi

if [ "ok$FAILS" != "ok" ]; then
    exit 1
fi
